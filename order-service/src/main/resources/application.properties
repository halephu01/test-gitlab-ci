# Application Configuration
spring.application.name=order-service
server.port=${SERVER_PORT:8081}

# Database Configuration
spring.datasource.url=${MYSQL_URL:jdbc:mysql://localhost:3306/order_service}
spring.datasource.username=${MYSQL_USER:root}
spring.datasource.password=${MYSQL_PASSWORD:mysql}
spring.jpa.hibernate.ddl-auto=${JPA_HIBERNATE_DDL_AUTO:none}

# Service URLs
inventory.service.url=${INVENTORY_SERVICE_URL:http://localhost:8082}

# Swagger Configuration
springdoc.swagger-ui.path=${SWAGGER_UI_PATH:/swagger-ui.html}
springdoc.api-docs.path=${API_DOCS_PATH:/api-docs}

# Resilience4j Circuit Breaker Properties
resilience4j.circuitbreaker.instances.inventory.registerHealthIndicator=${CB_REGISTER_HEALTH:true}
resilience4j.circuitbreaker.instances.inventory.event-consumer-buffer-size=${CB_BUFFER_SIZE:10}
resilience4j.circuitbreaker.instances.inventory.slidingWindowType=${CB_WINDOW_TYPE:COUNT_BASED}
resilience4j.circuitbreaker.instances.inventory.slidingWindowSize=${CB_WINDOW_SIZE:5}
resilience4j.circuitbreaker.instances.inventory.failureRateThreshold=${CB_FAILURE_RATE:50}
resilience4j.circuitbreaker.instances.inventory.waitDurationInOpenState=${CB_WAIT_DURATION:5s}
resilience4j.circuitbreaker.instances.inventory.permittedNumberOfCallsInHalfOpenState=${CB_PERMITTED_CALLS:3}
resilience4j.circuitbreaker.instances.inventory.automaticTransitionFromOpenToHalfOpenEnabled=${CB_AUTO_TRANSITION:true}
resilience4j.circuitbreaker.instances.inventory.minimum-number-of-calls=${CB_MIN_CALLS:5}

# Resilience4j Timeout Properties
resilience4j.timelimiter.instances.inventory.timeout-duration=${TIMEOUT_DURATION:3s}

# Resilience4j Retry Properties
resilience4j.retry.instances.inventory.max-attempts=${RETRY_MAX_ATTEMPTS:3}
resilience4j.retry.instances.inventory.wait-duration=${RETRY_WAIT_DURATION:5s}

# Kafka Properties
spring.kafka.bootstrap-servers=${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
spring.kafka.template.default-topic=${KAFKA_DEFAULT_TOPIC:order-placed}
spring.kafka.producer.key-serializer=${KAFKA_KEY_SERIALIZER:org.apache.kafka.common.serialization.StringSerializer}
spring.kafka.producer.value-serializer=${KAFKA_VALUE_SERIALIZER:io.confluent.kafka.serializers.KafkaAvroSerializer}
spring.kafka.producer.properties.schema.registry.url=${SCHEMA_REGISTRY_URL:http://127.0.0.1:8085}

